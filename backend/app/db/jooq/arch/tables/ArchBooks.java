/*
 * This file is generated by jOOQ.
*/
package db.jooq.arch.tables;


import db.jooq.arch.Indexes;
import db.jooq.arch.Keys;
import db.jooq.arch.Public;
import db.jooq.arch.tables.records.ArchBooksRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArchBooks extends TableImpl<ArchBooksRecord> {

    private static final long serialVersionUID = 599264279;

    /**
     * The reference instance of <code>public.arch_books</code>
     */
    public static final ArchBooks ARCH_BOOKS = new ArchBooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchBooksRecord> getRecordType() {
        return ArchBooksRecord.class;
    }

    /**
     * The column <code>public.arch_books.id</code>.
     */
    public final TableField<ArchBooksRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('arch_books_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.arch_books.name</code>.
     */
    public final TableField<ArchBooksRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.arch_books.book_order</code>.
     */
    public final TableField<ArchBooksRecord, Integer> BOOK_ORDER = createField("book_order", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.arch_books.user_id</code>.
     */
    public final TableField<ArchBooksRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.arch_books</code> table reference
     */
    public ArchBooks() {
        this(DSL.name("arch_books"), null);
    }

    /**
     * Create an aliased <code>public.arch_books</code> table reference
     */
    public ArchBooks(String alias) {
        this(DSL.name(alias), ARCH_BOOKS);
    }

    /**
     * Create an aliased <code>public.arch_books</code> table reference
     */
    public ArchBooks(Name alias) {
        this(alias, ARCH_BOOKS);
    }

    private ArchBooks(Name alias, Table<ArchBooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArchBooks(Name alias, Table<ArchBooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARCH_BOOKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArchBooksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARCH_BOOKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArchBooksRecord> getPrimaryKey() {
        return Keys.ARCH_BOOKS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArchBooksRecord>> getKeys() {
        return Arrays.<UniqueKey<ArchBooksRecord>>asList(Keys.ARCH_BOOKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArchBooks as(String alias) {
        return new ArchBooks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArchBooks as(Name alias) {
        return new ArchBooks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchBooks rename(String name) {
        return new ArchBooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchBooks rename(Name name) {
        return new ArchBooks(name, null);
    }
}
