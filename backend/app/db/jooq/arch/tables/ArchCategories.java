/*
 * This file is generated by jOOQ.
*/
package db.jooq.arch.tables;


import db.jooq.arch.Indexes;
import db.jooq.arch.Keys;
import db.jooq.arch.Public;
import db.jooq.arch.tables.records.ArchCategoriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArchCategories extends TableImpl<ArchCategoriesRecord> {

    private static final long serialVersionUID = 1760546725;

    /**
     * The reference instance of <code>public.arch_categories</code>
     */
    public static final ArchCategories ARCH_CATEGORIES = new ArchCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchCategoriesRecord> getRecordType() {
        return ArchCategoriesRecord.class;
    }

    /**
     * The column <code>public.arch_categories.id</code>.
     */
    public final TableField<ArchCategoriesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('arch_categories_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.arch_categories.name</code>.
     */
    public final TableField<ArchCategoriesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.arch_categories.user_id</code>.
     */
    public final TableField<ArchCategoriesRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.arch_categories</code> table reference
     */
    public ArchCategories() {
        this(DSL.name("arch_categories"), null);
    }

    /**
     * Create an aliased <code>public.arch_categories</code> table reference
     */
    public ArchCategories(String alias) {
        this(DSL.name(alias), ARCH_CATEGORIES);
    }

    /**
     * Create an aliased <code>public.arch_categories</code> table reference
     */
    public ArchCategories(Name alias) {
        this(alias, ARCH_CATEGORIES);
    }

    private ArchCategories(Name alias, Table<ArchCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArchCategories(Name alias, Table<ArchCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARCH_CATEGORIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArchCategoriesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARCH_CATEGORIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArchCategoriesRecord> getPrimaryKey() {
        return Keys.ARCH_CATEGORIES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArchCategoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<ArchCategoriesRecord>>asList(Keys.ARCH_CATEGORIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArchCategories as(String alias) {
        return new ArchCategories(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArchCategories as(Name alias) {
        return new ArchCategories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchCategories rename(String name) {
        return new ArchCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchCategories rename(Name name) {
        return new ArchCategories(name, null);
    }
}
